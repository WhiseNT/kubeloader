package com.whisent.kubeloader.utils.mod_gen;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.mojang.serialization.JsonOps;
import com.whisent.kubeloader.Kubeloader;
import com.whisent.kubeloader.definition.meta.PackMetaData;
import com.whisent.kubeloader.definition.meta.PackMetaDataBuilder;
import com.whisent.kubeloader.definition.meta.dependency.DependencyType;
import com.whisent.kubeloader.definition.meta.dependency.PackDependency;
import com.whisent.kubeloader.definition.meta.dependency.PackDependencyBuilder;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.Optional;

public class ContentPackGenerator {
    public static PackMetaDataBuilder createMetaData(String packId) {
        return PackMetaDataBuilder.create(packId);
    }
    public static PackDependencyBuilder createDependency(DependencyType type, String id) {
        return PackDependencyBuilder.create(type, id);
    }
    public static void generateContentPack(PackMetaData metaData) throws IOException {
        System.out.print("尝试生成ContentPack");
        String packId = metaData.id();
        Path packDir = Kubeloader.PackPath.resolve(packId);
        Files.createDirectories(packDir);
        List<String> dirs =List.of("server_scripts", "client_scripts", "startup_scripts", "assets", "data");
        dirs.forEach(dir -> {
            try {
                Files.createDirectories(packDir.resolve(dir));
                System.out.print("已生成目录：" + dir);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        JsonElement jsonElement = PackMetaData.CODEC
                .encodeStart(JsonOps.INSTANCE, metaData)
                .resultOrPartial(s -> {
                    throw new IllegalStateException("Failed to serialize PackMetaData: " + s);
                }).orElseThrow(() -> new RuntimeException("Failed to serialize PackMetaData"));
        String jsonString = Kubeloader.GSON
                .newBuilder()
                .setPrettyPrinting()
                .create()
                .toJson(jsonElement) + "\n";
        Files.writeString(
                packDir.resolve(Kubeloader.META_DATA_FILE_NAME),
                jsonString,
                StandardOpenOption.CREATE,
                StandardOpenOption.TRUNCATE_EXISTING
        );
    }
    public static void fastGenerateContentPack(String packId,List<String> authors) throws IOException {
        PackDependency dependency = PackDependencyBuilder
                .create(DependencyType.REQUIRED, "kubejs")
                .build();
        PackMetaData metaData = PackMetaDataBuilder.create(packId)
                .setAuthors(authors)
                .withVersion("1.0.0")
                .withDescription("This is a default content pack generated by KubeLoader")
                .addDependency(dependency)
                .build();
        generateContentPack(metaData);
    }
}
